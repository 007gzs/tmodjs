{"name":"Atc","tagline":"Template Compiler Tools","body":"#\tatc-前端模板预编译器\r\n\r\n<http://cdc-im.github.io/atc>\r\n\r\n\r\n##\t前言\r\n\r\n随着 HTML5 时代到来，前端技术在不断的发展壮大，我们为此欣喜若狂。但作为一名前端开发者，我们也不无时无刻的感受到很多看似平常的技术因为浏览器制约难以在前端中实现，其中之一便是模板技术。\r\n\t\r\n虽然我们已经有了很多优秀的前端模板引擎可以选择，但前端模板技术与服务端模板技术却完全不是一个层面的东西，受浏览器限制，前端模板按文件与目录组织、include 这些基本的特性几乎无法实现，如：\r\n\r\n\t<%include('./public/header')%>\r\n\t<h3><%=title%></h3>\r\n\t<ul>\r\n\t    <% for (i = 0; i < list.length; i ++) { %>\r\n\t       <li>\r\n\t        \t<a href=\"<%= list[i].url %>\">\r\n\t        \t\t<%= list[i].title %>\r\n\t        \t</a>\r\n\t       </li>\r\n\t    <% } %>\r\n\t</ul>\r\n\t<%include('./public/footer')%>\r\n\t\r\n而前端模板最佳实践是把所有模板使用``<script type=\"text/html\" ..``标签写在页面里面。[示例](http://aui.github.io/artTemplate/demo/basic.html) \r\n\r\n随着应用越来越复杂、模板越来越多、模板各种依赖出现的时候，我们的页面也变得臃肿不堪、难以维护，以至于我们不得不拿出各种技巧进行所谓优化，如抽离到js中、按需加载等。回过头再来看这些最佳实践，我们不经意之间为了解决一个问题引发了更多的问题，如跨域部署、依赖管理、压缩、按需加载、请求合并等。\r\n\r\n如何才是最佳的前端模板组织方案呢？\r\n\r\n##\t关于 atc\r\n\r\natc 即 artTemplate compiler，基于 [artTemplate](https://github.com/aui/artTemplate) 实现的前端模板预编译器，使用它可以让前端模版不再受浏览器的限制，支持如后端模版一样按文件放置、include 语句等特性：模板使用者无需关心模板内部的依赖，子模板会自动提前载入。\r\n\r\n编译后的模板不再依赖模板引擎，模板可以通过 [SeaJS](http://seajs.org) 或 [RequireJS](http://requirejs.org) 等加载器进行异步加载，亦能利用它们成熟的打包合并工具进行上线前的优化，如合并与压缩。\r\n\r\n##\t三分钟上手\r\n\r\n跑一个演示例子就能明白如何使用了，以批处理版本为例：\r\n\r\n首先 [下载 atc](https://github.com/cdc-im/atc/archive/master.zip) 并解压。\r\n\r\n双击 compiler.cmd 即可运行，打开后它会自动编译 ./demo/templates/ 中所有模板文件，并生成同名 js 文件。模板预编译一切就这么简单！\r\n\r\n编译结束后你可以打开 [./demo/index.html](http://cdc-im.github.io/atc/demo/)，看其模板如何被浏览器加载。\r\n\r\n其中演示模板 ./demo/templates/index.html 使用了``include``语句引用了多个公用模板，但使用者无需关心模板内部的包含关系，公用模板会被自动提前加载。\r\n\r\n##\t版本\r\n\r\n###\tWindows 批处理版本\r\n\r\n``compiler.cmd ``无依赖第三方环境，双击即可运行，简单实用。打开后它会自动编译 ./demo/templates/ 中所有模板文件（你可以右键编辑 compiler.cmd 的配置修改模板目录）\r\n\r\n###\tNodeJS 版本\r\n\r\n####\t特性\r\n\r\n*\t基于 NodeJS 跨平台\r\n*\t实时编译，监控模板修改（默认不开启）\r\n*\t检测模板语法错误\r\n\r\n####\t安装\r\n\r\n\tnpm install template-compiler -g\r\n\r\n####\t调用\r\n\r\n\tatc [options] path\r\n\r\n其中``path``是前端模板目录，例如：``atc -w demo/templates``\r\n\r\n####\t[options] 配置参数\r\n            \r\n*\t``-w``或``--watch``设置实时监控模板修改\r\n*\t``-d``或``--define-syntax``设置使用简单模板语法编译模板（自动加载语法扩展）\r\n*\t``-c charset``或``--charset charset``定义模板编码，默认``utf-8``\r\n*\t``-o path``或``--output path``定义输出目录，默认输出到模板目录\r\n*\t``--clone-helpers``设置辅助方法克隆到编译后的函数，默认外置($helpers.js)\r\n*\t``--version``显示 atc 版本号\r\n*\t``--help``显示帮助信息\r\n\r\n##\t模板语法\r\n\r\natc 是 [artTemplate](https://github.com/aui/artTemplate) 的子项目，语法也与其保持一致，亦可通过它的插件简化模板语法。\r\n\r\n###\t原生语法\r\n\r\n默认支持原生语法，正如本文开头的模板示例便就是 atc 支持的标准语法。\r\n\r\n模板使用``<%``与``%>``作为逻辑语句开始与闭合的标签，输出变量使用``=``或者``==``号开头，不同的是前者会对内容进行编码，以避免 XSS 漏洞。\r\n\r\n###\t简版语法\r\n\r\n如果想使用简单的模板语法，可以把``./lab/template-syntax.js``合并至``./lab/template.js``即可（NodeJS版本开启``-d``参数会自动加载语法扩展，无需手动合并）。\r\n\r\n本文开头的模板示例使用简单语法可以简化为：\r\n\r\n\t{include './public/header'}\r\n\t<h3>{title}</h3>\r\n\t<ul>\r\n\t    {each list}\r\n\t       <li>\r\n\t        \t<a href=\"{$value.url}\">\r\n\t        \t\t{$value.title}\r\n\t        \t</a>\r\n\t       </li>\r\n\t    {/each}\r\n\t</ul>\r\n\t{include './public/footer'}\r\n\t\r\n[简单语法详情](http://aui.github.com/artTemplate/extensions/index.html)\r\n\r\n##\t模板 include 语句规范\r\n\r\n为了让编译工具能够进行静态分析，需要如下约定：\r\n\r\n1.\t路径不能带后缀名\r\n2.\t路径不能够进行字符串运算\r\n3.\t路径不能使用变量\r\n\r\n**以下三种写法都是错误的：**\r\n\r\n1.\t``<%include('./index.html')%>``路径不能带后缀名\r\n2.\t``<%include('.' + '/idnex')%>``路径不能够进行字符串运算\r\n3.\t``<%include(value)%>``路径不能使用变量\r\n\r\n##\t更新日志\r\n\r\n###\tv1.0.2\r\n\r\nNodeJS版本：\r\n\r\n*\t增加``-o path``或``--output path``定义输出目录\r\n*\t修复``-d``或``--define-syntax``可能失效的问题\r\n*\t修改``-w``或``--watch``参数启动后的规则：只监控模板修改，而不再编译所有模板\r\n*\t增强调试特性：模板语法错误将在控制台输出调试源码，并停止进程\r\n\r\n###\tv1.0.1\r\n\r\nNodeJS版本：\r\n\r\n*\t支持监控目录，即时编译\r\n*\t使用命令行传递参数\r\n*\t使用 npm 管理包\r\n*\t支持设置简洁语法\r\n\r\n###\tv1.0.0\r\n\r\n*\t发布支持 NodeJS 与 Windows 批处理版本\r\n\r\n\r\n##\tatc 用户\r\n\r\n正在完善中.. [atc 用户+1](https://github.com/cdc-im/atc/issues/1)\r\n\r\n© cdc.tencent.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}