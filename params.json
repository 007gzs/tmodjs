{"name":"TmodJS - 前端模板之工程化利器","tagline":"Template Compiler Tools","body":"这些年，前端技术经历了井喷式的发展，各种库、框架、工具百花齐放，技术的发展也进一步让 web 开发者职责更加清晰，前后端分离已经成了主流的开发模式，在这种模式中，后端只负责吐出 JSON 数据，HTML 的模板渲染工作将完全交给前端处理，从而实现更优秀的体验。就目前而言，前端对于动态拼接 HTML 字符串也经历如下两个时期：\r\n\r\n##\t手工拼接字符串时代\r\n\r\n早期，开发人员都是直接在 js 文件中采用最原始的方式直接拼接 HTML 字符串：\r\n\r\n\tvar html = '';\r\n\tfor (var i = 0, users = data.users; i < users.length; i ++) {\r\n\t\thtml += '<li><a href=\"'\r\n\t\t+ users[i].url\r\n\t\t+ '\">'\r\n\t\t+ users[i].name\r\n\t\t+ '</a></li>';\r\n\t}\r\n\t//...\r\n\r\n这种方式刚开始在一两个简单的页面中还是比较灵活的，一旦随着业务复杂起来，或者多人维护的情况下弊端就越来越明显：它们非常难以书写、阅读与维护。\r\n\r\n##\t前端模板引擎时代\r\n\r\n受 jquery 作者的 [tmpl](http://ejohn.org/blog/javascript-micro-templating/) 模板引擎影响，从 09 年开始到现在绝大多数主流 web 站点已经部署了各种形式的前端模板引擎，一条前端模板类似这样：\r\n\r\n\t<script id=\"user_tmpl\" type=\"text/html\">\r\n\t{{each users as value}}\r\n\t\t<li>\r\n\t\t\t<a href=\"{{value.url}}\">{{value.name}}</a>\r\n\t\t</li>\r\n\t{{/each}}\r\n\t</script>\r\n\r\n它使用一个特殊的``<script type=\"text/html\"></script>``标签来存放模板（由于浏览器不支持这种类型的声明，它存放的代码不会当作 js 运行，代码也不会被显示出来）。使用模板引擎渲染模板的示例：\r\n\r\n\tvar html = tmpl('user_tmpl', data);\r\n\tdocument.getElementById('content').innerHTML = html;\r\n\t\r\n通过前端模板引擎将 UI 分离后，多人协作的问题已经得到解决，前端模板引擎它也成了前端技术体系中中一个十分基础的类库。但是，这种方式规模化后其弊端也随之而来：\r\n\r\n###\t页面内嵌模板之弊端\r\n\r\n####\t1. 开发调试\r\n\r\n每次修改前端模板需要改动页面的代码，有时候存放模板的页面又依赖服务器，这使得我们无法使用使用类似 Fiddler 的工具将页面映射到本地进行开发，从而不得不传到服务器或者自己搭建本地服务器环境，以至于开发维护过程异常繁琐。\r\n\r\n####\t2. 缓存优化\r\n\r\n动态页面与前端模板结合的架构中，不利于浏览器缓存，通常在单页应用中，页面页面会堆砌着大量的``<script type=\"text/html\"></script>``标签，每次进入应用都需要重新加载模板代码，造成不必要的网络开销。\r\n\r\n####\t3.\t模板复用\r\n\r\n比如类似“好友选择器”这样的公用模块，页面内嵌模板满足不了模板复用的需求。\r\n\r\n以上问题本质都是因为模板堆砌在一个文件中造成的，于是越来越的项目开始将前端模板从页面中迁移出来，目前主要有两种方式：\r\n\r\n###\t外置模板方案\r\n\r\n####\t1. Ajax 或 Iframe 远程拉取方案\r\n\r\n通过 Ajax 或 Iframe 加载远程模板，然后再使用模板引擎解析，这种方式的弊端相当明显：\r\n\r\n1.\t无法跨域部署。这是由浏览器同源策略限制的，导致模板无法部署到 CDN 网络。\r\n2.\t复杂度过高，难以接入主流的自动化部署、优化工具。\r\n\r\n####\t2. 在 JS 文件中存放模板\r\n\r\n为避免上述加载模板方案无法跨域的致命缺陷，模板存放在 js 文件中又成了最佳实践方式。但是 js 需要对回车符进行转义，会严重影响开发效率：\r\n\r\n\tvar user_tmpl =\r\n\t'<% for (var i = 0; i < users.length; i++) { %>\\\r\n\t\t<li>\\\r\n\t\t\t<a href=\"<%=users[i].url%>\">\\\r\n\t\t\t\t<%=users[i].name%>\\\r\n\t\t\t</a>\\\r\n\t\t</li>\\\r\n\t<% } %>';\r\n\t\r\n前端模板引擎 handlebars.js 与 Hogan.js 开始通过预先编译工具解决这个问题，它们支持将模板编译为 js 文件，以省去手工进行换行符转义的工作。以 handlebars.js 使用为例，先使用 NodeJS 安装它：\r\n\r\n\t$ npm install -g handlebars\r\n\r\n然后提取模板内容（``script`` 标签之间）并保存到一个文件中。在这里我们把它保存为 ``user.tmpl``。运行 ``handlebars`` 命令预编译这个模板文件。\r\n\r\n\t$ handlebars user_tmpl.tmpl -f user.tmpl.js\r\n\r\n编译完成后就可以在前端应用中加载这个脚本，比如这样引入：\r\n\r\n\t<script src=\"user.tmpl.js\"></script>\r\n\t\r\n在逻辑中可以如下访问到模板函数：\r\n\r\n\tvar template = Handlebars.templates[\"user.tmpl\"];\r\n\tvar html = template(data);\r\n\r\n虽然以上介绍的预编译已经支持了半自动化的模板转换，但操作实在是太繁琐。例如一个 web app 单页应用，几百条前端模板是常有的事儿，开发阶段我们会不断的拆分模板，如果每次都需要重新编译这简直会令人抓狂，与此同时大量零散的模板脚本也会引发新的问题，编译后的模板没有提供显式的依赖声明，自动化工具依然难以介入。\r\n\r\n###\t模板存放方案优劣总结\r\n\r\n存放方式 | 书写友好 | 跨域问题 | 本地调试 | 代码复用 | 缓存 | 按需加载\r\n------------ | ------------- | ------------ | ------------ | ------------\r\n页面内嵌 | ✓ | ✓ | ✗ | ✗ | ✗ | ✗\r\nAjax 远程加载 | ✓  | ✗| ✓ | ✓ | ✓ | ✓\r\n嵌入 js 文件 | ✗ | ✓ | ✓ | ✓ | ✓ | ✓\r\n\r\n在实践中，每种方案都是各有利弊，但都没有很好的提升开发效率与后期优化问题，总结：方便优化的模式不利于开发；利于开发的模式不利于优化。\r\n\r\n##\t工程化前端模板\r\n\r\n究竟有没有一种完美的方案，让前端模板开发变得像服务端模板一样简单自然？答案是肯定的，我们可以让自动化工具来处理琐碎的优化问题，开发者只需要专注模板本身，而 TmodJS 便是这么一个自动化工具，只为前端模板工程化而来！\r\n\r\n###\t1. 基于文件系统维护模板\r\n\r\n在 TmodJS 的规范中，前端模板不再内嵌到页面中，而是使用专门的目录进行组织维护。基于文件系统管理模板，这样完全将逻辑从逻辑中抽离出来，此时公用模板可以得到最大程度的复用、页面私有的碎片模板可以更好的得到命名保护。例如页面头部底部的公用模板可以放在 public 目录下，新闻栏目的模板可以放在 news 下面。\r\n\r\n每个模板就是一个 HTML 碎片文件，前端开发工程师可直接将设计师的静态页面的 HTML 拷贝过来，无需对换行符转义，开发效率会更高。\r\n\r\n###\t2. 使用同步接口加载模板\r\n\r\n现有阶段下，让各个浏览器支持跨域加载模板字符串是几乎是不可能的事情，于是 TmodJS 默认会将模板目录所有模板进行打包，输出一个 js 文件，内部每个模板使用路径作为模板 ID，于是这样就实现了一个伪同步加载的接口，它看起是这样：\r\n\t\r\n\tvar tpl = template('news/index');\r\n\tvar html = tpl(data);\r\n\tdocument.getElementById('content').innerHTML = html;\r\n\r\n使用路径作为模板 ID 有利于快速定位到模板源文件，对维护有很大的帮助。\r\n\r\n当然，将所有前端模板都打包在一个文件中不一定适合大型项目，所以 TmodJS 还可以选择不打包合并输出，这样编译后的模板脚本可以交给 GruntJS 等自动化工具进行按需合并。比如有些团队按照网站栏目建立模板子目录，并将栏目所有模板进行合并，栏目页面只加载当前栏目的模板。\r\n\r\n除此之外，使用 RequireJS 与 SeaJS 或者 NodeJS 的用户还可以通过配置将每一个模板都编译成与它们更亲近的模块，这时候模板加载的接口可以是这样的：\r\n\r\n\tvar tpl = requier('tpl/news/index');\r\n\tvar html = tpl(data);\r\n\t//...\r\n\t\r\n编译成 js 后，亦可使用 Fiddler 将线上前端模板映射到本地进行开发调试。\r\n\r\n###\t3. 子模板依赖在模板中声明\r\n\r\n既然使用模板支持文件系统来管理模板，模板支持``include``语句就是理所当然的事情了，直接通过它来加载公用模板，这样避免在业务逻辑中还要处理模板依赖。\r\n\r\n\t{{include './public/header'}}\r\n\r\n###\t4. 自动编译\r\n\r\n通过 NodeJS 支持，TmodJS 可以监听模板目录的修改，当模板发生修改则会进行增量编译。这个过程无需开发者介入，时间久了甚至可以让人忘记编译过程的存在（除非发生语法错误，编译器会告警）。\r\n\r\n###\t5. 一次编译，跨架构运行\r\n\r\n得益于日益强大 JS 生态本身，编译后的模板除了支持采用传统``<script>``标签加载模板包，也支持使用 RequireJS 或者 SeaJS 异步加载，还可以运行在基于 NodeJS 的服务器中，实现前后台模板共用。在最新的 TmodJS v0.0.3 版本中，甚至支持传统页面内嵌模板与 TmodJS 预编译模板的混合架构。\r\n\r\n##\t关于\r\n\r\nTmodJS 原名 atc，之前是腾讯内部公用组件平台的一个开源项目，后来重新使用新的方案进行了重构，并使用新名称对外开源 —— TmodJS。\r\n\r\nTmodJS 依赖了公用组件平台另外一个开源项目 artTemplate，并且原来 artTemplate 项目可以无缝迁移到基于 TmodJS 的预编译模板中来。\r\n\r\n###\tGithub 主页\r\n\r\n<https://github.com/aui/tmodjs>\r\n\r\n###\t常见问题\r\n\r\n问：TmodJS 需要部署到服务器中吗？\r\n\r\n> 答：不需要，这是本地开发工具，基于 NodeJS 编写是为了实现跨平台。\r\n\r\n问：TmodJS 的编译后模板性能如何？\r\n\r\n> 答：TmodJS 预编译器基于 artTemplate，artTemplate 的执行速度是业界领先的模板引擎之一（仍在不断优化中）。速度测试：<http://aui.github.io/artTemplate/test/test-speed.html>\r\n\r\n问：将模板编译成 js 语句会导致体积增加吗？\r\n\r\n> 答：不会，一般情况下还能起到压缩的效果。例如在腾讯 Microtrend 项目中采用 TmodJS 编译后，原来 Gzip 下 14kb 模板变成 7kb，压缩率高达到 50%，原因：1、模板编译器会压缩 HTML 多余字符 2、编译后代码简练且不再依赖模板引擎。具体请查看编译输出的模板：<http://microtrend.cdc.tencent.com/tpl/dist/template.js>\r\n\r\n###\t使用 TmodJS 的项目\r\n\r\n*\tQzone（腾讯）\r\n*\tSpa（迅雷）\r\n*\t爱拍原创（爱拍网络）\r\n*\tMicrotrend（腾讯）\r\n*\tTracker（腾讯）","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}